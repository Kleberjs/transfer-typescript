Requisitos:

1. Para ambos tipos de usuário, precisamos do Nome Completo, CPF, e-mail e Senha.
CPF/CNPJ e e-mails devem ser únicos no sistema. Sendo assim, seu sistema deve permitir apenas um cadastro com o mesmo CPF ou endereço de e-mail.

2.Usuários podem enviar dinheiro (efetuar transferência) para lojistas e entre usuários.

3.Lojistas só recebem transferências, não enviam dinheiro para ninguém.

4.Validar se o usuário tem saldo antes da transferência.

5.Antes de finalizar a transferência, deve-se consultar um serviço autorizador externo, 
use este mock para simular (https://run.mocky.io/v3/8fafdd68-a090-496f-8c9a-3442cf30dae6).

6.A operação de transferência deve ser uma transação (ou seja, revertida em qualquer caso de inconsistência) e o dinheiro deve voltar para a carteira do usuário que envia.

7.No recebimento de pagamento, o usuário ou lojista precisa receber notificação (envio de email, sms) enviada por um serviço de terceiro e eventualmente este serviço pode estar indisponível/instável. Use este mock para simular o envio (http://o4d9z.mocklab.io/notify).

8.Este serviço deve ser RESTFul.

Payload

Faça uma proposta ❤️ de payload, se preferir, temos uma exemplo aqui:
POST /transaction

{
    "value" : 100.00,
    "payer" : 4,
    "payee" : 15
}


O que será avaliado e valorizamos ❤️

Documentação
Se for para vaga sênior, foque bastante no desenho de arquitetura
Código limpo e organizado (nomenclatura, etc)
Conhecimento de padrões (PSRs, design patterns, SOLID)
Ser consistente e saber argumentar suas escolhas
Apresentar soluções que domina
Modelagem de Dados
Manutenibilidade do Código
Tratamento de erros
Cuidado com itens de segurança
Arquitetura (estruturar o pensamento antes de escrever)
Carinho em desacoplar componentes (outras camadas, service, repository)

De acordo com os critérios acima, iremos avaliar seu teste para avançarmos para a entrevista técnica. 
Caso não tenha atingido aceitavelmente o que estamos propondo acima, não iremos prosseguir com o processo.